<?

class A
{
	public function foo(){ // public дает возможность обращаться к функции снаружи
		static $x = 0; // static - статическая локальная переменная *
		echo ++$x;
	}
}
$a1 = new A();
$a2 = new A();
$a1 -> foo(); // 1
$a2 -> foo(); // 2
$a1 -> foo(); // 3
$a2 -> foo(); // 4

// *	Ключевое слово static, написанное перед присваиванием значения локальной переменной, приводит к следующим эффектам:
//	Присваивание выполняется только один раз, при первом вызове функции
//	Значение помеченной таким образом переменной сохраняется после окончания работы функции
//	При последующих вызовах функции вместо присваивания переменная получает сохраненное ранее значение 

?>


<?php

class A
{
    public function foo() 
	{ 
		static $x = 0; 
		echo ++$x;
	}
}

class B extends A
{
    
}
$a1 = new A;
$b1 = new B;
$a1 -> foo(); // 1
$b1 -> foo(); // 1 
$a1 -> foo(); // 2 
$b1 -> foo(); // 2 

//	Метод будет существовать лишь в одном экземпляре. Динамические методы существуют в контексте классов, а не объектов.